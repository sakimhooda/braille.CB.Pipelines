parameters:
- name: ProductName
  type: string
  default: $(Build.Repository.Name)
- name: NugetVersion
  type: string
  default: 5.x
- name: NugetConfigPath
  type: string
  default: nuget.config
- name: Solution
  type: string

steps:
- task: PkgESSetupBuild@12
  displayName: 'Initialize build'
  inputs:
    useDfs: false
    productName: ${{ parameters.ProductName }}

- powershell: |
    # Convert BuildPlatform to an OS repo recognized build platform (e.g. x64 -> amd64)
    Write-Host (get-item env:"BuildPlatform").Value
    
    $buildPlatform = (get-item env:"BuildPlatform").Value
    $osBuildPlatform = $buildPlatform
    if ($buildPlatform -ceq "x64")
    {
        $osBuildPlatform = "amd64"
    }
    
    Write-Host ("##vso[task.setvariable variable=OSBuildPlatform]$osBuildPlatform")
  displayName: 'Convert BuildPlatform to OSBuildPlatform'

- ${{ if contains(variables['Build.SourceBranch'], 'refs/heads/release/hotpatch') }}:
  - powershell: |
      $tag = "hotpatch"
      Write-Host "Setting NuGetPackBetaVersion to $tag"
      Write-Host ("##vso[task.setvariable variable=NuGetPackBetaVersion]$tag")
    failOnStderr: true
    displayName: 'Add hotpatch as prerelease tag'

- powershell: |
    gci env:* | sort -Property Name
  displayName: 'Dump Variables'

- task: NuGetToolInstaller@1
  displayName: 'Use NuGet ${{ parameters.NugetVersion }}'
  inputs:
    versionSpec:  ${{ parameters.NugetVersion }}

- task: NuGetAuthenticate@0

# NuGetCommand@2; Have to use the GUID because two tasks with the same name exist.
- task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
  displayName: 'NuGet restore'
  inputs:
    restoreSolution: ${{ parameters.Solution }}
    feedsToUse: config
    nugetConfigPath: ${{ parameters.NugetConfigPath }}